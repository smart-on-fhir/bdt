const Lab  = require("@hapi/lab")
const { expect } = require("@hapi/code")
const tap = require("../build/lib/assertions").default

const { it, describe, } = exports.lab = Lab.script();

// function test(res, throws = false) {
//     return tap(res, throws)
// }

describe("ResponseInspector", () => {

    it ("body.is", () => {
        expect(tap({ body: ""  }).body.is(""   )).to.equal(true )
        expect(tap({ body: "x" }).body.is(/^x$/)).to.equal(true )
        expect(tap({ body: "x" }).body.is(/^y$/)).to.equal(false)
        expect(() => tap({ body: "x" }, true).body.is(/^y$/, "test")).to.throw(/^test\. /)
    })

    it ("body.isOfType", () => {
        expect(tap({ body: ""   }).body.isOfType("string")).to.equal(true )
        expect(tap({ body: ""   }).body.isOfType("object")).to.equal(false)
        expect(tap({ body: {}   }).body.isOfType("string")).to.equal(false)
        expect(tap({ body: {}   }).body.isOfType("object")).to.equal(true )
        expect(tap({ body: null }).body.isOfType("object")).to.equal(true )
        expect(() => tap({ body: 0 }, true).body.isOfType("string", "test")).to.throw(/^test\. /)
    })

    it ("body.isJSON", () => {
        expect(      tap({ body: ""   }      ).body.isJSON(), '""'  ).to.equal(false)
        expect(      tap({ body: null }      ).body.isJSON(), 'null').to.equal(false)
        expect(      tap({ body: 5    }      ).body.isJSON(), '5'   ).to.equal(false)
        expect(      tap({ body: true }      ).body.isJSON(), 'true').to.equal(false)
        expect(      tap({ body: {}   }      ).body.isJSON(), '{}'  ).to.equal(true )
        expect(      tap({ body: []   }      ).body.isJSON(), '[]'  ).to.equal(true )
        expect(      tap({ body: "{}" }      ).body.isJSON(), '"{}"').to.equal(true )
        expect(      tap({ body: "[]" }      ).body.isJSON(), '"[]"').to.equal(true )
        expect(() => tap({ body: null }, true).body.isJSON("test")  ).to.throw(/^test\. /)
        expect(() => tap({ body: null }, true).body.isJSON()        ).to.throw("The response body is null.")
        expect(() => tap({ body: "x"  }, true).body.isJSON("test")  ).to.throw(/^test\. /)
        expect(() => tap({ body: "x"  }, true).body.isJSON()        ).to.throw(/^Error parsing JSON\:/)
        expect(() => tap({ body: 5    }, true).body.isJSON("test")  ).to.throw(/^test\. /)
        expect(() => tap({ body: 5    }, true).body.isJSON()        ).to.throw("The response body is not an object.")
        expect(() => tap({ body: {}   }, true).body.isJSON()        ).not.to.throw()
        expect(() => tap({ body: "{}" }, true).body.isJSON()        ).not.to.throw()
        expect(() => tap({ body: []   }, true).body.isJSON()        ).not.to.throw()
        expect(() => tap({ body: "[]" }, true).body.isJSON()        ).not.to.throw()
    })

    it ("body.isNDJSON", () => {
        expect(tap({ body: ""}).body.isNDJSON()).to.equal(true)
        expect(tap({ body: "{}\n{}"}).body.isNDJSON()).to.equal(true)
        expect(tap({ body: "\n{}\n\n{}\n\n\n"}).body.isNDJSON()).to.equal(true)
        expect(tap({ body: "{}\n[]"}).body.isNDJSON()).to.equal(true)
        expect(tap({ body: "{}\n5"}).body.isNDJSON()).to.equal(false)
        expect(tap({ body: null }).body.isNDJSON()).to.equal(false)
        expect(() => tap({ body: null }, true).body.isNDJSON()).to.throw()
        expect(() => tap({ body: null }, true).body.isNDJSON("test")).to.throw(/test/)
    })

    it ("isSuccessful", () => {
        expect(tap({ statusCode: 200 }).isSuccessful(), "200").to.equal(true )
        expect(tap({ statusCode: 201 }).isSuccessful(), "201").to.equal(true )
        expect(tap({ statusCode: 202 }).isSuccessful(), "202").to.equal(true )
        expect(tap({ statusCode: 203 }).isSuccessful(), "203").to.equal(false)
        expect(tap({ statusCode: 400 }).isSuccessful(), "400").to.equal(false)
        expect(() => tap({ statusCode: 400 }, true).isSuccessful("test")).to.throw(/^test\. /)
        expect(() => tap({ statusCode: 400 }, true).isSuccessful()).to.throw("Only 200, 201 and 202 status codes are considered successful.")
    })

    it ("isClientError", () => {
        expect(tap({ statusCode: 400 }).isClientError(), "400").to.equal(true )
        expect(tap({ statusCode: 499 }).isClientError(), "499").to.equal(true )
        expect(tap({ statusCode: 100 }).isClientError(), "100").to.equal(false)
        expect(tap({ statusCode: 200 }).isClientError(), "499").to.equal(false)
        expect(tap({ statusCode: 300 }).isClientError(), "300").to.equal(false)
        expect(tap({ statusCode: 500 }).isClientError(), "500").to.equal(false)
        expect(tap({ statusCode: 600 }).isClientError(), "600").to.equal(false)
        expect(() => tap({ statusCode: 600 }, true).isClientError("test")).to.throw(/^test\. /)
        expect(() => tap({ statusCode: 600 }, true).isClientError()).to.throw("Only 4XX status codes are considered client errors.")
    })

    it ("isServerError", () => {
        expect(tap({ statusCode: 500 }).isServerError(), "500").to.equal(true )
        expect(tap({ statusCode: 599 }).isServerError(), "599").to.equal(true )
        expect(tap({ statusCode: 100 }).isServerError(), "100").to.equal(false)
        expect(tap({ statusCode: 200 }).isServerError(), "499").to.equal(false)
        expect(tap({ statusCode: 300 }).isServerError(), "300").to.equal(false)
        expect(tap({ statusCode: 400 }).isServerError(), "400").to.equal(false)
        expect(tap({ statusCode: 600 }).isServerError(), "600").to.equal(false)
        expect(() => tap({ statusCode: 600 }, true).isServerError("test")).to.throw(/^test\. /)
        expect(() => tap({ statusCode: 600 }, true).isServerError()).to.throw("Only 5XX status codes are considered server errors.")
    })

    it ("isFailed", () => {
        expect(tap({ statusCode: 600 }).isFailed(), "600").to.equal(false)
        expect(tap({ statusCode: 500 }).isFailed(), "500").to.equal(true )
        expect(tap({ statusCode: 400 }).isFailed(), "400").to.equal(true )
        expect(tap({ statusCode: 300 }).isFailed(), "300").to.equal(false)
        expect(tap({ statusCode: 200 }).isFailed(), "200").to.equal(false)
        expect(tap({ statusCode: 100 }).isFailed(), "100").to.equal(false)
        expect(() => tap({ statusCode: 600 }, true).isFailed("test")).to.throw(/^test\. /)
        expect(() => tap({ statusCode: 600 }, true).isFailed()).to.throw("Only 5XX status codes are considered server errors.")
    })

    it ("isTextPlain", () => {
        expect(tap({ headers: { "content-type": "text/plain" }, body: ""}).isTextPlain()).to.equal(true)
        expect(tap({ headers: { "content-type": "text/plain;whatever" }, body: ""}).isTextPlain()).to.equal(true)
        expect(tap({ headers: { "content-type": "text/plain" }, body: null}).isTextPlain()).to.equal(false)
        expect(tap({ headers: { "content-type": "text/html" }, body: ""}).isTextPlain()).to.equal(false)
        expect(tap({ body: ""}).isTextPlain()).to.equal(false)
        expect(() => tap({ body: ""}, true).isTextPlain("test")).to.throw(/^test\. /)
        expect(() => tap({ body: ""}, true).isTextPlain()).to.throw()
        expect(() => tap({ headers: { "content-type": "text/plain" }, body: null}, true).isTextPlain()).to.throw()
    })

    it ("isJson", () => {
        expect(tap({ headers: { "content-type": "application/json" }, body: {}}).isJson()).to.equal(true)
        expect(tap({ headers: { "content-type": "application/json" }, body: "{}"}).isJson()).to.equal(true)
        expect(tap({ headers: { "content-type": "application/json;whatever" }, body: {}}).isJson()).to.equal(true)
        expect(tap({ headers: { "content-type": "application/fhir+json" }, body: {}}).isJson()).to.equal(true)
        expect(tap({ headers: { "content-type": "application/json+fhir" }, body: {}}).isJson()).to.equal(true)
        expect(tap({ headers: { "content-type": "application/xml" }, body: {}}).isJson()).to.equal(false)
        expect(tap({ headers: { "content-type": "text/plain" }, body: {}}).isJson()).to.equal(false)
        expect(tap({ headers: { "content-type": "application/json" }, body: null}).isJson()).to.equal(false)
        expect(tap({ headers: {}, body: null}).isJson()).to.equal(false)
        expect(tap({ headers: {}}).isJson()).to.equal(false)
        expect(tap({ body: {}}).isJson()).to.equal(false)
        expect(tap({}).isJson()).to.equal(false)
        expect(() => tap({}, true).isJson("test")).to.throw(/^test\. /)
        expect(() => tap({}, true).isJson()).to.throw('The "content-type" response header does not match "/^application\\/(json|fhir\\+json|json\\+fhir)/".')
        expect(() => tap({ headers: { "content-type": "application/json" } }, true).isJson()).to.throw('The response body is not an object.')
        expect(() => tap({ headers: { "content-type": "application/json" }, body: 5 }, true).isJson()).to.throw('The response body is not an object.')
        expect(() => tap({ headers: { "content-type": "application/json" }, body: null }, true).isJson()).to.throw('The response body is null.')
        expect(() => tap({ headers: { "content-type": "application/json" }, body: "{x}" }, true).isJson()).to.throw(/Error parsing JSON\:/)
    })

    it("isFhirResource", () => {
        expect(tap({ headers: { "content-type": "application/json" }, body: { resourceType: "Patient" }}).isFhirResource()).to.equal(true)
        expect(tap({ headers: { "content-type": "application/json" }, body: { resourceType: null }}).isFhirResource()).to.equal(true)
        expect(tap({ headers: { "content-type": "application/json" }, body: {}}).isFhirResource()).to.equal(false)
        expect(() => tap({ headers: { "content-type": "application/json" }, body: {}}, true).isFhirResource("test")).to.throw(/^test\. /)
        expect(() => tap({ headers: { "content-type": "application/json" }, body: {}}, true).isFhirResource()).to.throw('The response body has no "resourceType".')
    })

    it("isFhirResourceType", () => {
        expect(tap({ headers: { "content-type": "application/json" }, body: { resourceType: "Patient" }}).isFhirResourceType("Patient")).to.equal(true)
        expect(tap({ headers: { "content-type": "application/json" }, body: { resourceType: null }}).isFhirResourceType("Patient")).to.equal(false)
        expect(tap({ headers: { "content-type": "application/json" }, body: {}}).isFhirResourceType("Patient")).to.equal(false)
        expect(() => tap({ headers: { "content-type": "application/json" }, body: {}}, true).isFhirResourceType("Patient", "test")).to.throw(/^test\. /)
        expect(() => tap({ headers: { "content-type": "application/json" }, body: {}}, true).isFhirResourceType("Patient")).to.throw('The response body has no "resourceType".')
        expect(() => tap({ headers: { "content-type": "application/json" }, body: { resourceType: "Test" }}, true).isFhirResourceType("Patient")).to.throw('The response body "resourceType" is not equal to "Patient".')
    })
})

